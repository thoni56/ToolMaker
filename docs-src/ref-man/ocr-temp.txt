ToolMaker
Reference Manual
Version 2.0
==================================================
Part V
Toolmake
Reference Manual

@PAGE 229 -- Part V Contents
@PAGE 231 -- Toolmake Reference Manual


@PAGE 232 -- Toolmake Reference Manual

2   PRINCIPLES OF OPERATION
When started toolmake will ask you about the system name and the target language to be used.

Then the command loop is entered which allows you to select or deselect the components you intend to be ToolMaker based. Initially all components are selected. If a component is selected toolmake will generate template or example versions of the files relating to that component.

The command loop also allows the level of information in the generated files to be specified (minimal, normal or a complete example).

Note: When generating without all components the resulting files will not be guaranteed to be compilable without modifications.

Finally the suggestion for a main program and a makefile (or command file) may be selected or deselected.

In the generation phase toolmake produces necessary (explicitly or implicitly requested) description and other files in the current directory by calling the Macro Processor IMP to prepare them from skeleton files in the target language libraries.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@PAGE 233 -- Toolmake Reference Manual

3   THE TOOLMAKE COMMAND
Toolmake is invoked by the following call:

toolmake [-help] [<option>...] [<system-name>]


3.1 Parameters

Toolmake takes one optional parameter, the subsystem name, this parameter is used as default for a subsequent question about the name. Or, as a matter of fact, as the subsystem name in combination with the -go option.

3.2 Options -[-]go

Do [not] enter the generation phase immediately without starting any command loop (default: off, i.e ask the user first!).

-[-]verbose

Enable [disable] verbose output mode (default: off). Verbose mode will give some information regarding the actions chosen by toolmake.

-help

Gives you a brief but informative help on the arguments and options to the toolmake program.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@PAGE 234 -- Toolmake Reference Manual

4   TOOLMAKE RUN-TIME USAGE
When using toolmake you will normally go through two phases. First specification, when you decide the subsystems name, target language, parts to use etc. Each of the parts may be selected or deselected simply by typing its name, the contents level is selected by typing level followed by the level required.

The second phase is the generation phase when toolmake (by using IMP) actually creates the proper files in your current directory. In this phase you will only need to interact if any errors or unclarities are discovered. The generation phase is automatically entered by giving an empty specification command (i.e. a carriage return without any input).

Toolmake is built to be robust in interaction with the user (that's you), so you can always get help when asked a question by typing a question mark. These properties in addition to the walk-through in ToolMaker System Description should give you the aid needed.

4.1 Subsystem Name

The initial question when toolmake is started is

Subsystem name?

This question should be answered with the name your new ToolMaker-based system should have. This name will be the basename for all description files, main program template and Makefile-target generated by toolmake.

If the optional argument is used (see section 3.1 on page 233) that is used as the answer for this question and the question is not put.

The specified system name, target language along with the selected components and the contents level is then presented. Then the toolmake prompt appears.

4.2 ToolMake Commands

At the prompt one of the commands listed below may be used. The default command, which is executed if an empty command is entered, is presented within parenthesis. For example

toolmake (GENERATE)>

4.2.1   GENERATE

The generate command will start the generation of the files (components) currently selected. After completed generation toolmake is terminated. If any of the generated files already exists the user is required to confirm overwriting them.

@PAGE 235 -- Toolmake Reference Manual

4.2.2   QUIT

The quit command immediately terminates toolmake, without any generation of files.

4.2.3   ALL

To select all components supported, the all command can be used. To select means that they are candidates for being generated when the generation phase is entered.

4.2.4   NONE

The none command is the opposite of the all command. Le. all components are deselected.

4.2.5   PARSER, SCANNER, LISTER, MAIN, MAKEFILE

These commands all toggle the selection of the corresponding component. Le if the component is selected it will be deselected, and vice versa.

4.2.6   LEVEL

The level command takes one parameter which is one of

* MINIMAL
* NORMAL

EXAMPLE

If the level is not specified in the command, toolmake will prompt for it (together with the default value).

4.2.7   LANGUAGE

The target language to be used in the generated files can be set with the 1 anguage command. It also requires the language as a parameter. Possible languages are

C ANSI-C C++

If the language is not specified in the command toolmake will prompt for it together with the default value in parenthesis.

@PAGE 236 -- Toolmake Reference Manual

4.2.8   VERBOSE

The verbose command toggles the setting of verbose mode. When ON toolmake prints some extra information during generation.

4.2.9   HELP

The command help will list the available commands together with a short description as opposed to the '?' which only lists the command names.
4.2.10 INFORMATION

The information command lists the current setting of the various options, such as selected components, target language and contents level.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@PAGE 237 -- Toolmake Reference Manual

A   ERROR MESSAGES

The following diagnostic messages may appear when running toolmake. In this list they appear sorted in severity order, with the most severe messages first. Emphasized words in the error messages below are substituted with the actual error information.
A.1 System Errors

System error! malloc: out of memory
A very serious error since toolmake hardly uses any dynamic memory, please contact your systems administrator or your ToolMaker contact person.
System error! function(): switch error (integer)
A very serious software error in toolmake, please contact your ToolMaker contact person.
System error! IMP failed to set variable (error code integer) System error! IMP failed (error level integer)
Internal errors in the communication between toolmake and IMP, please contact your systems administrator or your ToolMaker contact person.
A.2 Fatal Errors

Fatal! Language library not found: language name
The selected language is not yet installed on your system, or the environmental variable TMHOME is not properly set.
Fatal! Illegal function type: function name
An error in the command line parsing, please contact your ToolMaker contact person.
Fatal! Skeleton file halted with error code integer
IMP executed an %%EXIT command in a skeleton file, this should not occur and should be reported to your ToolMaker contact person.
A.3 Errors

Error! File not found: file
Probably the environmental variable TMHOME is not properly set, e.g. the indicated directory can contain an older version of ToolMaker.

@PAGE 238 -- Toolmake Reference Manual

Error! Non-matching option: option
An unknown option was supplied.
Error! License server: unknown error (number)
The license file did not have the correct format. Contact your ToolMaker contact person.
A.4 Warnings

Warning! Argument not used: argument
Too many arguments where supplied.
Warning! File exists: file
This messages informs you that a file to be generated already exists. You are asked a new question about which action to take (quit, rename etc. HELP will give more information).
Warning! License server: no license available
You were not able to get a ToolMaker license as there were too many other simultaneous users. Try again later.
Warning! License server: date expired
Your ToolMaker license has expired. Contact your ToolMaker contact person.
Warning! License server: no contact
ToolMaker was not properly installed or your license server process has died. Contact your ToolMaker contact person or system administrator.
Warning! License server: date expired
Your ToolMaker license has probably expired. Please contact your ToolMaker contact person or system administrator.
Warning! License server: illegal license key
The password in the license file was illegal. Contact your ToolMaker contact person.
Warning! License server: format error
The license file did not have the correct format. Contact your ToolMaker contact person.

@PAGE 239 -- Toolmake Reference Manual

Warning! License server: license file missing
No license file was found in the TMHOME directory. Contact your ToolMaker contact person.
A.5 Informational Messages

Note that informational messages are only printed when the verbose output mode is enabled.

Information! Generating: file
Informational message about the file to be generated.
Information! Backup file: file
If you decide to generate a file although it already exists the old file will be saved with another name.
Information! Execution stopped
The previous error was so severe that toolmake is aborted.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@PAGE 240 -- Toolmake Reference Manual

B   FILE GENERATION DETAILS

The details in this appendix should be regarded as an internal interface between toolmake and the skeleton files used, compatibility between two versions of ToolMaker is not guaranteed.

The toolmake program is however guaranteed to be available in future versions.
B.1 Generated Files

The files generated differs naturally depending on target language, wanted components and generation level. For the default case and a subsystem called x, the following ToolMaker description files will be generated:

* x.tmk The common ToolMaker description file.
* x.smk The ScannerMaker description file.
* x.pmk The ParserMaker description file.
* x.lmk The ListerMaker description file.

And for your convenience:

* x.c   An example main program.
* Makefile  A suitable file for make(l).

The following source code files will be generated empty by toolmake, to be filled by the various Makers.

* xCommon.h subsystem common definitions, e.g. token definition
* xScSema.c, xScan.c, xScan.h scanner
* xPaSema.c, xParse.c, xParse.h parser
* xList.c, xList.h lister
* xErr.c, xErr.h error handler, an interface between parser and lister

B.2 Skeleton Files

Toolmake uses skeleton files for all the files it produces. The skeleton files are found in the different language libraries found under the ToolMaker directory, $TMHOME/lib (normally /usr/local/ToolMaker/lib/).

@PAGE 241 -- Toolmake Reference Manual

These files are used as input to IMP together with the appropriate settings of all the variables above. The output should be directed to an appropriate output file in the current directory. For example, for a 'ansi-c'-based system with the system name p10:

imp -s T("12:34:56") -s D("1990-01-12") \ -s sN("p10") -s_tL("ansi-c") ... \ $TMHOME/lib/c/main.imp p10.c

For more details on using the Macro Processor IMP refer to the IMP Reference Manual.

The skeleton files for the files produced by toolmake are:

* pmk.imp ParserMaker description file skeleton
* smk.imp ScannerMaker description file skeleton
* lmk.imp ListerMaker description file skeleton
* tmk.imp common description file skeleton
* main.imp main program skeleton
* makefile.imp makefile skeleton
* voc.imp ScannerMaker vocabulary file skeleton

B.3 IMP Variables

Toolmake uses SoftLabs Incremental Macro Processor, IMP, in order to generate the files properly. In each call to IMP, toolmake will set some IMP variables. These are used by the IMP scripts to produce the appropriate file. The following variables are required:

Variable Description (example value)
T   Current time ("23 : 59 : 59 ")
_D  Current date 1999-12-31
_P  Producers name ("toolmake")
_V  Version information (v2, rO, c0)
_sN System name ("pl0")
_Lvl    Contents level, MINIMAL, NORMAL or EXAMPLE (NORMAL) _tOS    Target OS (SunOS)
_tL Target language ("ansi -c " )
_tD Target directory below $TMHOME/lib ("ansi-c ")
_tX Target language file extension (" c ")
_i  Included parts of ToolMaker (sm, pm, 1m, tm)
mm  If main module generated (YES)

If you would do a manual call to IMP in order to produce any of the library files, see below, you must supply these variables. This should however be avoided since this may not be compatible with coming versions of ToolMaker.

==================================================
Index

@PAGE 242 -- Toolmake Reference Manual

@PAGE 245

Symbols
#line 91

A
acceptance cost 73 ambiguous grammar 68

B
BNF 60

C
character class 156 character map 149 character set 142, 148 closure 155 common options 30
relevant for ListerMaker 202
relevant for ParserMaker 87
relevant for ScannerMaker 141 context 164
cut operator 155

D
delete cost 95
description file 25 disambiguating rules 68, 71

E
EBNF 60
embedded semantic actions 67 end of input 157 end of text 157 error correction 72 error message 22 error recovery 72
improvement 94
interface module 108
tuning 75

F
fiducial symbol 74, 75, 98
full list 213

G
global messages 198 grammar attributes 64
in EBNF rules 65 grammar file 77 grammar production 62

H
hook 147

I
IMP 24
include 210,213
Incremental Macro Processor 24 inherited attributes 67 insert cost 95
insert string 199, 218 insertion marker 199, 218 item set 100

L
LALR 23, 68
left recursive grammar 89 lexical attributes 67 Lister 198
ListerMaker 24 listing file 27, 28, 100 listing information 200 listing phases 209

M
Maker 25
Maker prefix 42 markers 28, 199, 218 message
number 198, 219
template 28, 198, 201, 218 message sections 204 metalingustic variables 60 modification rules 71



@PAGE 246

Index
N
nested files 210, 213 non-terminals 60



@PAGE 0

option format
in description files 40
on the command line 40 option precedence 42

P
packing 90, 143
panic mode 75
parse stack overflow 89 parser entry point 107 parser prefix 76 ParserMaker 23 posthook 147 prefix 42, 76, 136 prehook 147

R
reader 146
recovery point 107 reduce-reduce conflict 68 regular expressions 154-158 right recursive grammar 89
scanner 134
scanner context 164 ScannerMaker 24 screening 134, 143
semantic actions 63, 66, 99, 134
embedded 67
severity 199 shift-reduce conflict 68 single symbol correction 73 skeleton files 26, 77, 137 source position 22, 198
source position calculation 135, 166 standard error 214
standard input 146
string synthesising 74 syntax error 72 synthesized attributes 66 system name 234 system prefix 42, 76, 97

T
table packing 90, 143
terminals 60 tiny list 213 token 134
token buffer 144 token type 36 toolmake 24, 29
ToolMaker Common Description
file 26, 100, 160, 204

U
unknown token 158

V
vocabulary 28, 103, 134, 151 vocabulary file 27, 102

